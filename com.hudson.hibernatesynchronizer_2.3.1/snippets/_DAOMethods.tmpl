:DAOMethods
The methods that exist on the base DAO
#if ($class.ParentRoot.Id)
	public ${class.SignatureFullClassName} load(${class.ParentRoot.Id.Property.SignatureFullClassName} key)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
#if ($class.ParentRoot.Id.Property.isPrimitive())
		return (${class.SignatureFullClassName}) load(getReferenceClass(), new ${class.ParentRoot.Id.Property.ObjectClass}(key));
#else
		return (${class.SignatureFullClassName}) load(getReferenceClass(), key);
#end
	}

	public ${class.SignatureFullClassName} load(${class.ParentRoot.Id.Property.SignatureFullClassName} key, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
#if ($class.ParentRoot.Id.Property.isPrimitive())
		return (${class.SignatureFullClassName}) load(getReferenceClass(), new ${class.ParentRoot.Id.Property.ObjectClass}(key), s);
#else
		return (${class.SignatureFullClassName}) load(getReferenceClass(), key, s);
#end
	}

	public ${class.SignatureFullClassName} loadInitialize(${class.ParentRoot.Id.Property.SignatureFullClassName} key, Session s) 
#if ($exceptionClass) 
			throws ${exceptionClass} { 
#else 
	{ 
#end 
		${class.SignatureFullClassName} obj = load(key, s); 
		if (!Hibernate.isInitialized(obj)) {
			Hibernate.initialize(obj);
		} 
		return obj; 
	}

	/**
	 * Persist the given transient instance, first assigning a generated identifier. (Or using the current value
	 * of the identifier property if the assigned generator is used.) 
	 * @param ${class.VarName} a transient instance of a persistent class 
	 * @return the class identifier
	 */
	public ${class.ParentRoot.Id.Property.ObjectClass} save(${class.SignatureFullClassName} ${class.VarName})
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		return (${class.ParentRoot.Id.Property.ObjectClass}) super.save(${class.VarName});
	}

	/**
	 * Persist the given transient instance, first assigning a generated identifier. (Or using the current value
	 * of the identifier property if the assigned generator is used.) 
	 * Use the Session given.
	 * @param ${class.VarName} a transient instance of a persistent class
	 * @param s the Session
	 * @return the class identifier
	 */
	public ${class.ParentRoot.Id.Property.ObjectClass} save(${class.SignatureFullClassName} ${class.VarName}, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		return (${class.ParentRoot.Id.Property.ObjectClass}) super.save(${class.VarName}, s);
	}
#end

	/**
	 * Either save() or update() the given instance, depending upon the value of its identifier property. By default
	 * the instance is always saved. This behaviour may be adjusted by specifying an unsaved-value attribute of the
	 * identifier property mapping. 
	 * @param ${class.VarName} a transient instance containing new or updated state 
	 */
	public void saveOrUpdate(${class.SignatureFullClassName} ${class.VarName})
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.saveOrUpdate(${class.VarName});
	}

	/**
	 * Either save() or update() the given instance, depending upon the value of its identifier property. By default the
	 * instance is always saved. This behaviour may be adjusted by specifying an unsaved-value attribute of the identifier
	 * property mapping. 
	 * Use the Session given.
	 * @param ${class.VarName} a transient instance containing new or updated state.
	 * @param s the Session.
	 */
	public void saveOrUpdate(${class.SignatureFullClassName} ${class.VarName}, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.saveOrUpdate(${class.VarName}, s);
	}

	/**
	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent
	 * instance with the same identifier in the current session.
	 * @param ${class.VarName} a transient instance containing updated state
	 */
	public void update(${class.SignatureFullClassName} ${class.VarName}) 
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.update(${class.VarName});
	}

	/**
	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent
	 * instance with the same identifier in the current session.
	 * Use the Session given.
	 * @param ${class.VarName} a transient instance containing updated state
	 * @param the Session
	 */
	public void update(${class.SignatureFullClassName} ${class.VarName}, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.update(${class.VarName}, s);
	}
#if ($class.ParentRoot.Id && $class.ParentRoot.Id.hasExternalClass())

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * @param id the instance ID to be removed
	 */
	public void delete(${class.ParentRoot.Id.Property.FullClassName} id)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.delete(load(id));
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * Use the Session given.
	 * @param id the instance ID to be removed
	 * @param s the Session
	 */
	public void delete(${class.ParentRoot.Id.Property.FullClassName} id, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.delete(load(id, s), s);
	}
#end

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * @param ${class.VarName} the instance to be removed
	 */
	public void delete(${class.FullClassName} ${class.VarName})
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.delete(${class.VarName});
	}

	/**
	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving
	 * Session or a transient instance with an identifier associated with existing persistent state. 
	 * Use the Session given.
	 * @param ${class.VarName} the instance to be removed
	 * @param s the Session
	 */
	public void delete(${class.FullClassName} ${class.VarName}, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.delete(${class.VarName}, s);
	}
	
	/**
	 * Re-read the state of the given instance from the underlying database. It is inadvisable to use this to implement
	 * long-running sessions that span many business tasks. This method is, however, useful in certain special circumstances.
	 * For example 
	 * <ul> 
	 * <li>where a database trigger alters the object state upon insert or update</li>
	 * <li>after executing direct SQL (eg. a mass update) in the same session</li>
	 * <li>after inserting a Blob or Clob</li>
	 * </ul>
	 */
	public void refresh (${class.FullClassName} ${class.VarName}, Session s)
#if ($exceptionClass)
		throws ${exceptionClass} {
#else
	{
#end
		super.refresh(${class.VarName}, s);
	}

    public String getDefaultOrderProperty () {
#if ($class.getProperty("Name"))
		return "${class.getProperty("Name").Name}";
#elseif ($class.getProperty("DisplayName"))
		return "${class.getProperty("DisplayName").Name}";
#elseif ($class.getProperty("FirstName") && $class.getProperty("LastName"))
		return "${class.getProperty("LastName").Name}";
#elseif ($class.getProperty("Title"))
		return "${class.getProperty("Title").Name}";
#elseif ($class.getProperty("DisplayTitle"))
		return "${class.getProperty("DisplayTitle").Name}";
#elseif ($class.getProperty("DisplayValue"))
		return "${class.getProperty("DisplayValue").Name}";
#elseif ($class.getProperty("Display"))
		return "${class.getProperty("Display").Name}";
#else
		return null;
#end
    }